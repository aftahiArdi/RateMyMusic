import type { AriaInvalid, Booleanish } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    name: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    form: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    multiple: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    required: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: string;
    };
    plain: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    ariaInvalid: {
        type: import("vue").PropType<AriaInvalid>;
        default: undefined;
    };
    autofocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<string | number | unknown[] | Record<string, unknown> | null>;
        default: string;
    };
    options: {
        type: import("vue").PropType<unknown[] | Record<string, unknown>>;
        default: () => never[];
    };
    disabledField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    htmlField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    textField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    valueField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    labelField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    optionsField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    selectSize: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
}, {
    element: import("vue").Ref<HTMLElement | undefined>;
    focus: () => void;
    blur: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    input: (value: unknown) => void;
    'update:modelValue': (value: unknown) => void;
    change: (value: unknown) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    name: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    form: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    disabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    multiple: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    required: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    size: {
        type: import("vue").PropType<keyof import("../../types").BaseSize>;
        default: string;
    };
    plain: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    state: {
        type: import("vue").PropType<Booleanish | null>;
        default: null;
    };
    ariaInvalid: {
        type: import("vue").PropType<AriaInvalid>;
        default: undefined;
    };
    autofocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<string | number | unknown[] | Record<string, unknown> | null>;
        default: string;
    };
    options: {
        type: import("vue").PropType<unknown[] | Record<string, unknown>>;
        default: () => never[];
    };
    disabledField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    htmlField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    textField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    valueField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    labelField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    optionsField: {
        type: import("vue").PropType<string>;
        default: string;
    };
    selectSize: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: unknown) => any) | undefined;
    onChange?: ((value: unknown) => any) | undefined;
    onInput?: ((value: unknown) => any) | undefined;
}, {
    name: string;
    form: string;
    id: string;
    disabled: Booleanish;
    multiple: Booleanish;
    required: Booleanish;
    size: keyof import("../../types").BaseSize;
    plain: Booleanish;
    state: Booleanish | null;
    ariaInvalid: AriaInvalid;
    autofocus: Booleanish;
    modelValue: string | number | unknown[] | Record<string, unknown> | null;
    options: unknown[] | Record<string, unknown>;
    disabledField: string;
    htmlField: string;
    textField: string;
    valueField: string;
    labelField: string;
    optionsField: string;
    selectSize: string | number;
}, {}>, {
    default?: ((props: Record<string, never>) => any) | undefined;
    first?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
