import type { TableField, TableFieldObject, TableItem } from '../../types';
import type { TableFieldObjectFormatter } from '../../types/TableFieldObject';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    dark: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    caption: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    small: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    align: {
        type: import("vue").PropType<import("../../types").VerticalAlign>;
        default: undefined;
    };
    variant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: undefined;
    };
    striped: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    items: {
        type: import("vue").PropType<TableItem[]>;
        default: () => never[];
    };
    borderVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: undefined;
    };
    stacked: {
        type: import("vue").PropType<boolean | import("../../types").Breakpoint>;
        default: boolean;
    };
    bordered: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    borderless: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    captionTop: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    hover: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    responsive: {
        type: import("vue").PropType<boolean | import("../../types").Breakpoint>;
        default: boolean;
    };
    stripedColumns: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    tableClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    stickyHeader: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    fields: {
        type: import("vue").PropType<TableField[]>;
        default: () => never[];
    };
    footClone: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    labelStacked: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    showEmpty: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    emptyText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    emptyFilteredText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    fieldColumnClass: {
        type: import("vue").PropType<(field: TableFieldObject<Record<string, unknown>>) => Record<string, any>[]>;
        default: undefined;
    };
    tbodyTrClass: {
        type: import("vue").PropType<(item: TableItem | null, type: string) => string | any[] | null | undefined>;
        default: undefined;
    };
    virtualFields: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'head-clicked': (key: import("../../types").LiteralUnion<string>, field: TableField, event: MouseEvent, isFooter: boolean) => void;
    'row-clicked': (item: TableItem, index: number, event: MouseEvent) => void;
    'row-dbl-clicked': (item: TableItem, index: number, event: MouseEvent) => void;
    'row-hovered': (item: TableItem, index: number, event: MouseEvent) => void;
    'row-unhovered': (item: TableItem, index: number, event: MouseEvent) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dark: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    caption: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    small: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    align: {
        type: import("vue").PropType<import("../../types").VerticalAlign>;
        default: undefined;
    };
    variant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: undefined;
    };
    striped: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    items: {
        type: import("vue").PropType<TableItem[]>;
        default: () => never[];
    };
    borderVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: undefined;
    };
    stacked: {
        type: import("vue").PropType<boolean | import("../../types").Breakpoint>;
        default: boolean;
    };
    bordered: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    borderless: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    captionTop: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    hover: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    responsive: {
        type: import("vue").PropType<boolean | import("../../types").Breakpoint>;
        default: boolean;
    };
    stripedColumns: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    tableClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    stickyHeader: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    fields: {
        type: import("vue").PropType<TableField[]>;
        default: () => never[];
    };
    footClone: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    labelStacked: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    showEmpty: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    emptyText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    emptyFilteredText: {
        type: import("vue").PropType<string>;
        default: string;
    };
    fieldColumnClass: {
        type: import("vue").PropType<(field: TableFieldObject<Record<string, unknown>>) => Record<string, any>[]>;
        default: undefined;
    };
    tbodyTrClass: {
        type: import("vue").PropType<(item: TableItem | null, type: string) => string | any[] | null | undefined>;
        default: undefined;
    };
    virtualFields: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
}>> & {
    "onHead-clicked"?: ((key: import("../../types").LiteralUnion<string>, field: TableField, event: MouseEvent, isFooter: boolean) => any) | undefined;
    "onRow-clicked"?: ((item: TableItem, index: number, event: MouseEvent) => any) | undefined;
    "onRow-dbl-clicked"?: ((item: TableItem, index: number, event: MouseEvent) => any) | undefined;
    "onRow-hovered"?: ((item: TableItem, index: number, event: MouseEvent) => any) | undefined;
    "onRow-unhovered"?: ((item: TableItem, index: number, event: MouseEvent) => any) | undefined;
}, {
    dark: import("../../types").Booleanish;
    caption: string;
    small: import("../../types").Booleanish;
    align: import("../../types").VerticalAlign;
    variant: keyof import("../../types").BaseColorVariant | null;
    striped: import("../../types").Booleanish;
    items: TableItem[];
    borderVariant: keyof import("../../types").BaseColorVariant | null;
    stacked: boolean | import("../../types").Breakpoint;
    bordered: import("../../types").Booleanish;
    borderless: import("../../types").Booleanish;
    captionTop: import("../../types").Booleanish;
    hover: import("../../types").Booleanish;
    responsive: boolean | import("../../types").Breakpoint;
    stripedColumns: import("../../types").Booleanish;
    tableClass: any;
    stickyHeader: import("../../types").Booleanish;
    fields: TableField[];
    footClone: import("../../types").Booleanish;
    labelStacked: boolean;
    showEmpty: import("../../types").Booleanish;
    emptyText: string;
    emptyFilteredText: string;
    fieldColumnClass: (field: TableFieldObject<Record<string, unknown>>) => Record<string, any>[];
    tbodyTrClass: (item: TableItem | null, type: string) => string | any[] | null | undefined;
    virtualFields: string | number;
}, {}>, Partial<Record<string, (_: {
    label: string | undefined;
    column: import("../../types").LiteralUnion<string>;
    field: TableFieldObject<Record<string, unknown>>;
    isFoot: boolean;
}) => any>> & Partial<Record<string, (_: {
    value: unknown;
    index: number;
    item: TableItem;
    field: TableFieldObject<Record<string, unknown>>;
    items: TableItem[];
    toggleDetails: () => void;
    detailsShowing: boolean | undefined;
}) => any>> & Partial<Record<string, (_: {
    label: string | undefined;
    column: import("../../types").LiteralUnion<string>;
    field: TableFieldObject<Record<string, unknown>>;
    isFoot: boolean;
}) => any>> & {
    "thead-top"?(_: {}): any;
    "thead-tr-prefix"?(_: {}): any;
    "field-prefix"?(_: {
        field: TableFieldObject<Record<string, unknown>>;
    }): any;
    "thead-sub"?(_: {
        key: import("../../types").LiteralUnion<string>;
        label?: string | undefined;
        headerTitle?: string | undefined;
        headerAbbr?: string | undefined;
        class?: any;
        formatter?: TableFieldObjectFormatter<Record<string, unknown>> | undefined;
        sortable?: boolean | undefined;
        sortKey?: string | undefined;
        sortDirection?: string | undefined;
        sortByFormatted?: boolean | undefined;
        filterByFormatted?: boolean | undefined;
        tdClass?: any;
        thClass?: any;
        thStyle?: import("vue").StyleValue | undefined;
        variant?: keyof import("../../types").BaseColorVariant | null | undefined;
        tdAttr?: import("vue").TdHTMLAttributes | undefined;
        thAttr?: import("vue").ThHTMLAttributes | undefined;
        isRowHeader?: boolean | undefined;
        stickyColumn?: boolean | undefined;
        items: TableFieldObject<Record<string, unknown>>[];
    }): any;
    "top-row"?(_: {}): any;
    "tbody-tr-prefix"?(_: {
        item: TableItem;
    }): any;
    "row-details"?(_: {
        item: TableItem;
        toggleDetails: () => void;
    }): any;
    "tbody-prefix"?(_: {
        fieldsTotal: number;
    }): any;
    empty?(_: {
        items: TableItem[];
    }): any;
    "bottom-row"?(_: {}): any;
    "tfoot-tr-prefix"?(_: {}): any;
    "custom-foot"?(_: {
        fields: TableFieldObject<Record<string, unknown>>[];
        items: TableItem[];
        columns: number;
    }): any;
    "table-caption"?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
