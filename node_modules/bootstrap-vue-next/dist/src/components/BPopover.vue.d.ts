import { type Placement as OriginalPlacement } from '@floating-ui/vue';
import { BvTriggerableEvent } from '../utils';
import { type ComponentPublicInstance, type MaybeRef } from 'vue';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    offset: {
        type: import("vue").PropType<string | number | null>;
        default: null;
    };
    target: {
        type: import("vue").PropType<MaybeRef<string | HTMLElement | HTMLSpanElement | ComponentPublicInstance<HTMLElement> | null>>;
        default: null;
    };
    html: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    title: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    variant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    modelValue: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    hide: {
        type: import("vue").PropType<import("../types").Booleanish>;
    };
    delay: {
        type: import("vue").PropType<number | {
            show: number;
            hide: number;
        }>;
        default: () => {
            show: number;
            hide: number;
        };
    };
    noFade: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    container: {
        type: import("vue").PropType<string | HTMLElement | ComponentPublicInstance<HTMLElement>>;
        default: undefined;
    };
    reference: {
        type: import("vue").PropType<MaybeRef<string | HTMLElement | HTMLSpanElement | ComponentPublicInstance<HTMLElement> | null>>;
        default: null;
    };
    content: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    click: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    manual: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    customClass: {
        type: import("vue").PropType<any>;
        default: string;
    };
    placement: {
        type: import("vue").PropType<import("../types").BPopoverPlacement>;
        default: string;
    };
    strategy: {
        type: import("vue").PropType<import("@floating-ui/vue").Strategy>;
        default: string;
    };
    floatingMiddleware: {
        type: import("vue").PropType<{
            name: string;
            options?: any;
            fn: (state: {
                placement: OriginalPlacement;
                strategy: import("@floating-ui/vue").Strategy;
                x: number;
                y: number;
                initialPlacement: OriginalPlacement;
                middlewareData: import('../../node_modules/@floating-ui/core').MiddlewareData;
                rects: import("@floating-ui/vue").ElementRects;
                platform: import('../../node_modules/@floating-ui/core').Platform;
                elements: import("@floating-ui/vue").Elements;
            }) => import('../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../node_modules/@floating-ui/core').MiddlewareReturn>;
        }[]>;
        default: undefined;
    };
    noFlip: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    noShift: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    noAutoClose: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    realtime: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    inline: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    tooltip: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    noninteractive: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
}, {
    hide: (e: Event) => void;
    show: () => void;
    toggle: (e: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    show: (value: BvTriggerableEvent) => void;
    shown: (value: BvTriggerableEvent) => void;
    hide: (value: BvTriggerableEvent) => void;
    hidden: (value: BvTriggerableEvent) => void;
    'hide-prevented': () => void;
    'show-prevented': () => void;
    'update:modelValue': (value: boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    offset: {
        type: import("vue").PropType<string | number | null>;
        default: null;
    };
    target: {
        type: import("vue").PropType<MaybeRef<string | HTMLElement | HTMLSpanElement | ComponentPublicInstance<HTMLElement> | null>>;
        default: null;
    };
    html: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    title: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    variant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    modelValue: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    hide: {
        type: import("vue").PropType<import("../types").Booleanish>;
    };
    delay: {
        type: import("vue").PropType<number | {
            show: number;
            hide: number;
        }>;
        default: () => {
            show: number;
            hide: number;
        };
    };
    noFade: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    container: {
        type: import("vue").PropType<string | HTMLElement | ComponentPublicInstance<HTMLElement>>;
        default: undefined;
    };
    reference: {
        type: import("vue").PropType<MaybeRef<string | HTMLElement | HTMLSpanElement | ComponentPublicInstance<HTMLElement> | null>>;
        default: null;
    };
    content: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    click: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    manual: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    customClass: {
        type: import("vue").PropType<any>;
        default: string;
    };
    placement: {
        type: import("vue").PropType<import("../types").BPopoverPlacement>;
        default: string;
    };
    strategy: {
        type: import("vue").PropType<import("@floating-ui/vue").Strategy>;
        default: string;
    };
    floatingMiddleware: {
        type: import("vue").PropType<{
            name: string;
            options?: any;
            fn: (state: {
                placement: OriginalPlacement;
                strategy: import("@floating-ui/vue").Strategy;
                x: number;
                y: number;
                initialPlacement: OriginalPlacement;
                middlewareData: import('../../node_modules/@floating-ui/core').MiddlewareData;
                rects: import("@floating-ui/vue").ElementRects;
                platform: import('../../node_modules/@floating-ui/core').Platform;
                elements: import("@floating-ui/vue").Elements;
            }) => import('../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../node_modules/@floating-ui/core').MiddlewareReturn>;
        }[]>;
        default: undefined;
    };
    noFlip: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    noShift: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    noAutoClose: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    realtime: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    inline: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    tooltip: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
    noninteractive: {
        type: import("vue").PropType<import("../types").Booleanish>;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    onShown?: ((value: BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
}, {
    offset: string | number | null;
    target: MaybeRef<string | HTMLElement | HTMLSpanElement | ComponentPublicInstance<HTMLElement> | null>;
    html: import("../types").Booleanish;
    title: string;
    id: string;
    variant: keyof import("../types").BaseColorVariant | null;
    modelValue: import("../types").Booleanish;
    delay: number | {
        show: number;
        hide: number;
    };
    noFade: import("../types").Booleanish;
    container: string | HTMLElement | ComponentPublicInstance<HTMLElement>;
    reference: MaybeRef<string | HTMLElement | HTMLSpanElement | ComponentPublicInstance<HTMLElement> | null>;
    content: string;
    click: import("../types").Booleanish;
    manual: import("../types").Booleanish;
    customClass: any;
    placement: import("../types").BPopoverPlacement;
    strategy: import("@floating-ui/vue").Strategy;
    floatingMiddleware: {
        name: string;
        options?: any;
        fn: (state: {
            placement: OriginalPlacement;
            strategy: import("@floating-ui/vue").Strategy;
            x: number;
            y: number;
            initialPlacement: OriginalPlacement;
            middlewareData: import('../../node_modules/@floating-ui/core').MiddlewareData;
            rects: import("@floating-ui/vue").ElementRects;
            platform: import('../../node_modules/@floating-ui/core').Platform;
            elements: import("@floating-ui/vue").Elements;
        }) => import('../../node_modules/@floating-ui/core').MiddlewareReturn | Promise<import('../../node_modules/@floating-ui/core').MiddlewareReturn>;
    }[];
    noFlip: import("../types").Booleanish;
    noShift: import("../types").Booleanish;
    noAutoClose: import("../types").Booleanish;
    realtime: import("../types").Booleanish;
    inline: import("../types").Booleanish;
    tooltip: import("../types").Booleanish;
    noninteractive: import("../types").Booleanish;
}, {}>, {
    target?: ((props: {
        show: () => void;
        hide: (e: Event) => void;
        toggle: (e: Event) => void;
        showState: boolean;
    }) => any) | undefined;
    default?: ((props: Record<string, never>) => any) | undefined;
    title?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
