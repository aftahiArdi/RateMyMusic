declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    target: {
        type: import("vue").PropType<import("../../types").LinkTarget>;
        default: string;
    };
    body: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    to: {
        type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
        default: undefined;
    };
    title: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    replace: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    href: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    rel: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    disabled: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    active: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: undefined;
    };
    activeClass: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    append: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    routerComponentName: {
        type: import("vue").PropType<string>;
        default: string;
    };
    variant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: null;
    };
    opacity: {
        type: import("vue").PropType<10 | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100">;
        default: undefined;
    };
    opacityHover: {
        type: import("vue").PropType<10 | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100">;
        default: undefined;
    };
    underlineVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: null;
    };
    underlineOffset: {
        type: import("vue").PropType<1 | 2 | 3 | "1" | "2" | "3">;
        default: undefined;
    };
    underlineOffsetHover: {
        type: import("vue").PropType<1 | 2 | 3 | "1" | "2" | "3">;
        default: undefined;
    };
    underlineOpacity: {
        type: import("vue").PropType<0 | 10 | "0" | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100">;
        default: undefined;
    };
    underlineOpacityHover: {
        type: import("vue").PropType<0 | 10 | "0" | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100">;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<number | boolean>;
        default: boolean;
    };
    icon: {
        type: import("vue").PropType<import("../../types").Booleanish>;
    };
    delay: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    bodyClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    headerClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    headerTag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    animation: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    isStatus: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    autoHide: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    noCloseButton: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    noFade: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    noHoverPause: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    solid: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    toastClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    showOnPause: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    interval: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    progressProps: {
        type: import("vue").PropType<Omit<import("../../types").BProgressBarProps, "value" | "label" | "max" | "labelHtml">>;
        default: undefined;
    };
    bgVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: null;
    };
    textVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseTextColorVariant | null>;
        default: null;
    };
}, {
    pause: () => void;
    resume: () => void;
    restart: () => void;
    stop: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    destroyed: () => void;
    close: () => void;
    closed: () => void;
    'close-countdown': (value: number) => void;
    'update:modelValue': (value: number | boolean) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    target: {
        type: import("vue").PropType<import("../../types").LinkTarget>;
        default: string;
    };
    body: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    to: {
        type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
        default: undefined;
    };
    title: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    replace: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    href: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    rel: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    disabled: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    active: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: undefined;
    };
    activeClass: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    append: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    routerComponentName: {
        type: import("vue").PropType<string>;
        default: string;
    };
    variant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: null;
    };
    opacity: {
        type: import("vue").PropType<10 | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100">;
        default: undefined;
    };
    opacityHover: {
        type: import("vue").PropType<10 | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100">;
        default: undefined;
    };
    underlineVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: null;
    };
    underlineOffset: {
        type: import("vue").PropType<1 | 2 | 3 | "1" | "2" | "3">;
        default: undefined;
    };
    underlineOffsetHover: {
        type: import("vue").PropType<1 | 2 | 3 | "1" | "2" | "3">;
        default: undefined;
    };
    underlineOpacity: {
        type: import("vue").PropType<0 | 10 | "0" | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100">;
        default: undefined;
    };
    underlineOpacityHover: {
        type: import("vue").PropType<0 | 10 | "0" | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100">;
        default: undefined;
    };
    modelValue: {
        type: import("vue").PropType<number | boolean>;
        default: boolean;
    };
    icon: {
        type: import("vue").PropType<import("../../types").Booleanish>;
    };
    delay: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    bodyClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    headerClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    headerTag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    animation: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    isStatus: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    autoHide: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    noCloseButton: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    noFade: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    noHoverPause: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    solid: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    toastClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    showOnPause: {
        type: import("vue").PropType<import("../../types").Booleanish>;
        default: boolean;
    };
    interval: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    progressProps: {
        type: import("vue").PropType<Omit<import("../../types").BProgressBarProps, "value" | "label" | "max" | "labelHtml">>;
        default: undefined;
    };
    bgVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseColorVariant | null>;
        default: null;
    };
    textVariant: {
        type: import("vue").PropType<keyof import("../../types").BaseTextColorVariant | null>;
        default: null;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: number | boolean) => any) | undefined;
    onClose?: (() => any) | undefined;
    onClosed?: (() => any) | undefined;
    "onClose-countdown"?: ((value: number) => any) | undefined;
    onDestroyed?: (() => any) | undefined;
}, {
    target: import("../../types").LinkTarget;
    body: string;
    to: import("vue-router").RouteLocationRaw;
    title: string;
    replace: import("../../types").Booleanish;
    href: string;
    id: string;
    rel: string;
    disabled: import("../../types").Booleanish;
    active: import("../../types").Booleanish;
    activeClass: string;
    append: import("../../types").Booleanish;
    routerComponentName: string;
    variant: keyof import("../../types").BaseColorVariant | null;
    opacity: 10 | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100";
    opacityHover: 10 | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100";
    underlineVariant: keyof import("../../types").BaseColorVariant | null;
    underlineOffset: 1 | 2 | 3 | "1" | "2" | "3";
    underlineOffsetHover: 1 | 2 | 3 | "1" | "2" | "3";
    underlineOpacity: 0 | 10 | "0" | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100";
    underlineOpacityHover: 0 | 10 | "0" | "10" | 25 | 50 | 75 | 100 | "25" | "50" | "75" | "100";
    modelValue: number | boolean;
    delay: string | number;
    bodyClass: any;
    headerClass: any;
    headerTag: string;
    animation: import("../../types").Booleanish;
    isStatus: import("../../types").Booleanish;
    autoHide: import("../../types").Booleanish;
    noCloseButton: import("../../types").Booleanish;
    noFade: import("../../types").Booleanish;
    noHoverPause: import("../../types").Booleanish;
    solid: import("../../types").Booleanish;
    toastClass: any;
    showOnPause: import("../../types").Booleanish;
    interval: string | number;
    progressProps: Omit<import("../../types").BProgressBarProps, "value" | "label" | "max" | "labelHtml">;
    bgVariant: keyof import("../../types").BaseColorVariant | null;
    textVariant: keyof import("../../types").BaseTextColorVariant | null;
}, {}>, {
    title?(_: {
        hide: () => void;
    }): any;
    default?(_: {
        hide: () => void;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
