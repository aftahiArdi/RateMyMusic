import { type RendererElement } from 'vue';
import type { Booleanish } from '../types';
import { BvTriggerableEvent } from '../utils';
type SharedSlotsData = {
    cancel: () => void;
    close: () => void;
    hide: (trigger?: string) => void;
    ok: () => void;
    visible: boolean;
};
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    title: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    size: {
        type: import("vue").PropType<"xl" | keyof import("../types").BaseSize>;
        default: string;
    };
    lazy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    bodyClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    headerClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    noFade: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    titleTag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    bodyBgVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    bodyTextVariant: {
        type: import("vue").PropType<keyof import("../types").BaseTextColorVariant | null>;
        default: null;
    };
    footerVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    footerBgVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    footerBorderVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    footerClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    footerTextVariant: {
        type: import("vue").PropType<keyof import("../types").BaseTextColorVariant | null>;
        default: null;
    };
    headerBgVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    headerBorderVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    headerVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    headerTextVariant: {
        type: import("vue").PropType<keyof import("../types").BaseTextColorVariant | null>;
        default: null;
    };
    bodyVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    busy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    buttonSize: {
        type: import("vue").PropType<keyof import("../types").BaseSize>;
        default: string;
    };
    cancelDisabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    cancelTitle: {
        type: import("vue").PropType<string>;
        default: string;
    };
    cancelVariant: {
        type: import("vue").PropType<keyof import("../types").BaseButtonVariant | null>;
        default: string;
    };
    centered: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    contentClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    dialogClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    fullscreen: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    headerCloseClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    headerCloseLabel: {
        type: import("vue").PropType<string>;
        default: string;
    };
    headerCloseVariant: {
        type: import("vue").PropType<keyof import("../types").BaseButtonVariant | null>;
        default: string;
    };
    hideBackdrop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    hideFooter: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    hideHeader: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    hideHeaderClose: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modalClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    noCloseOnBackdrop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noCloseOnEsc: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    autoFocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    okDisabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    okOnly: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    okTitle: {
        type: import("vue").PropType<string>;
        default: string;
    };
    okVariant: {
        type: import("vue").PropType<keyof import("../types").BaseButtonVariant | null>;
        default: string;
    };
    scrollable: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    titleClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    titleSrOnly: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    autoFocusButton: {
        type: import("vue").PropType<"close" | "cancel" | "ok">;
        default: undefined;
    };
    teleportDisabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    teleportTo: {
        type: import("vue").PropType<string | RendererElement | null>;
        default: string;
    };
    bodyScrolling: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    backdropVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: undefined;
    };
}, {
    hide: (trigger?: string) => void;
    show: () => void;
    id: string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:modelValue': (value: boolean) => void;
    show: (value: BvTriggerableEvent) => void;
    shown: (value: BvTriggerableEvent) => void;
    hide: (value: BvTriggerableEvent) => void;
    hidden: (value: BvTriggerableEvent) => void;
    'hide-prevented': () => void;
    'show-prevented': () => void;
    ok: (value: BvTriggerableEvent) => void;
    cancel: (value: BvTriggerableEvent) => void;
    close: (value: BvTriggerableEvent) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    id: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    size: {
        type: import("vue").PropType<"xl" | keyof import("../types").BaseSize>;
        default: string;
    };
    lazy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modelValue: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    bodyClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    headerClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    noFade: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    titleTag: {
        type: import("vue").PropType<string>;
        default: string;
    };
    bodyBgVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    bodyTextVariant: {
        type: import("vue").PropType<keyof import("../types").BaseTextColorVariant | null>;
        default: null;
    };
    footerVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    footerBgVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    footerBorderVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    footerClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    footerTextVariant: {
        type: import("vue").PropType<keyof import("../types").BaseTextColorVariant | null>;
        default: null;
    };
    headerBgVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    headerBorderVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    headerVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    headerTextVariant: {
        type: import("vue").PropType<keyof import("../types").BaseTextColorVariant | null>;
        default: null;
    };
    bodyVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: null;
    };
    busy: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    buttonSize: {
        type: import("vue").PropType<keyof import("../types").BaseSize>;
        default: string;
    };
    cancelDisabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    cancelTitle: {
        type: import("vue").PropType<string>;
        default: string;
    };
    cancelVariant: {
        type: import("vue").PropType<keyof import("../types").BaseButtonVariant | null>;
        default: string;
    };
    centered: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    contentClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    dialogClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    fullscreen: {
        type: import("vue").PropType<string | boolean>;
        default: boolean;
    };
    headerCloseClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    headerCloseLabel: {
        type: import("vue").PropType<string>;
        default: string;
    };
    headerCloseVariant: {
        type: import("vue").PropType<keyof import("../types").BaseButtonVariant | null>;
        default: string;
    };
    hideBackdrop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    hideFooter: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    hideHeader: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    hideHeaderClose: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    modalClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    noCloseOnBackdrop: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    noCloseOnEsc: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    autoFocus: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    okDisabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    okOnly: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    okTitle: {
        type: import("vue").PropType<string>;
        default: string;
    };
    okVariant: {
        type: import("vue").PropType<keyof import("../types").BaseButtonVariant | null>;
        default: string;
    };
    scrollable: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    titleClass: {
        type: import("vue").PropType<any>;
        default: undefined;
    };
    titleSrOnly: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    autoFocusButton: {
        type: import("vue").PropType<"close" | "cancel" | "ok">;
        default: undefined;
    };
    teleportDisabled: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    teleportTo: {
        type: import("vue").PropType<string | RendererElement | null>;
        default: string;
    };
    bodyScrolling: {
        type: import("vue").PropType<Booleanish>;
        default: boolean;
    };
    backdropVariant: {
        type: import("vue").PropType<keyof import("../types").BaseColorVariant | null>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    onShown?: ((value: BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
    onClose?: ((value: BvTriggerableEvent) => any) | undefined;
    onCancel?: ((value: BvTriggerableEvent) => any) | undefined;
    onOk?: ((value: BvTriggerableEvent) => any) | undefined;
}, {
    title: string;
    id: string;
    size: "xl" | keyof import("../types").BaseSize;
    lazy: Booleanish;
    modelValue: Booleanish;
    bodyClass: any;
    headerClass: any;
    noFade: Booleanish;
    titleTag: string;
    bodyBgVariant: keyof import("../types").BaseColorVariant | null;
    bodyTextVariant: keyof import("../types").BaseTextColorVariant | null;
    footerVariant: keyof import("../types").BaseColorVariant | null;
    footerBgVariant: keyof import("../types").BaseColorVariant | null;
    footerBorderVariant: keyof import("../types").BaseColorVariant | null;
    footerClass: any;
    footerTextVariant: keyof import("../types").BaseTextColorVariant | null;
    headerBgVariant: keyof import("../types").BaseColorVariant | null;
    headerBorderVariant: keyof import("../types").BaseColorVariant | null;
    headerVariant: keyof import("../types").BaseColorVariant | null;
    headerTextVariant: keyof import("../types").BaseTextColorVariant | null;
    bodyVariant: keyof import("../types").BaseColorVariant | null;
    busy: Booleanish;
    buttonSize: keyof import("../types").BaseSize;
    cancelDisabled: Booleanish;
    cancelTitle: string;
    cancelVariant: keyof import("../types").BaseButtonVariant | null;
    centered: Booleanish;
    contentClass: any;
    dialogClass: any;
    fullscreen: string | boolean;
    headerCloseClass: any;
    headerCloseLabel: string;
    headerCloseVariant: keyof import("../types").BaseButtonVariant | null;
    hideBackdrop: Booleanish;
    hideFooter: Booleanish;
    hideHeader: Booleanish;
    hideHeaderClose: Booleanish;
    modalClass: any;
    noCloseOnBackdrop: Booleanish;
    noCloseOnEsc: Booleanish;
    autoFocus: Booleanish;
    okDisabled: Booleanish;
    okOnly: Booleanish;
    okTitle: string;
    okVariant: keyof import("../types").BaseButtonVariant | null;
    scrollable: Booleanish;
    titleClass: any;
    titleSrOnly: Booleanish;
    autoFocusButton: "close" | "cancel" | "ok";
    teleportDisabled: Booleanish;
    teleportTo: string | RendererElement | null;
    bodyScrolling: Booleanish;
    backdropVariant: keyof import("../types").BaseColorVariant | null;
}, {}>, {
    header?: ((props: SharedSlotsData) => any) | undefined;
    title?: ((props: SharedSlotsData) => any) | undefined;
    'header-close'?: ((props: Record<string, never>) => any) | undefined;
    default?: ((props: SharedSlotsData) => any) | undefined;
    footer?: ((props: SharedSlotsData) => any) | undefined;
    cancel?: ((props: SharedSlotsData) => any) | undefined;
    ok?: ((props: SharedSlotsData) => any) | undefined;
    backdrop?: ((props: Record<string, never>) => any) | undefined;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
